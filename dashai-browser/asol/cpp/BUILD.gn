# This BUILD.gn file defines how the C++ parts of the ASOL are built.
# It's assumed this directory is part of the overall GN build process.

# The AsolManager might be used by the browser client-side to interact with the gateway.
# Or, its logic could be entirely server-side within AsolServiceImpl.
# For now, keeping it as a separate library.
static_library("asol_cpp_lib") {
  sources = [
    "asol_manager.h",
    "asol_manager.cc",
  ]
  deps = [
    "//proto:asol_ipc_protos", # For message types
    # If AsolManager becomes a gRPC client:
    # "//third_party/grpc:grpc++", # Placeholder for actual gRPC dependency in Chromium
  ]
  # public_configs, include_dirs etc. would be important here.
  # For generated proto headers to be found like "proto/asol_service.pb.h",
  # the include path would need to point to the root `dashai-browser` dir,
  # or the include statements would need to be adjusted.
  # For now, assuming `proto_library` makes `asol_service.pb.h` available directly
  # (e.g. via public_configs in //proto:asol_ipc_protos making its gen dir an include path)
  # and `asol_manager.h` would use `#include "asol_service.pb.h"`.
  # The current include in asol_manager.h is "proto/asol_service.pb.h"
  # which implies `dashai-browser` root is an include dir.
}

# Service implementation library
static_library("asol_service_impl_lib") {
  sources = [
    "asol_service_impl.h",
    "asol_service_impl.cc",
  ]
  deps = [
    "//proto:asol_ipc_protos", # For generated service and message types
    "//asol/adapters/gemini:gemini_text_adapter_lib", # Gemini Adapter dependency
    # "//asol/cpp/utils:network_request_util_lib", # Already a dep of gemini_text_adapter_lib
    "//third_party/grpc:grpc++", # Placeholder for actual gRPC dependency in Chromium
                                 # This would provide <grpcpp/grpcpp.h> etc.
  ]
  # Include path considerations:
  # - For "proto/asol_service.grpc.pb.h": Needs `dashai-browser` as include root, or adjustment.
  # - For "asol/adapters/gemini/gemini_text_adapter.h": Needs `dashai-browser` as include root.
}

# ASOL Gateway Server library
static_library("asol_gateway_server_lib") {
  sources = [
    "asol_gateway_server.h",
    "asol_gateway_server.cc",
  ]
  deps = [
    ":asol_service_impl_lib",    # Depends on our service implementation
    "//third_party/grpc:grpc++", # Placeholder for gRPC
  ]
}

# Main executable for the ASOL Gateway
executable("asol_gateway") {
  sources = [
    "main.cc",
  ]
  deps = [
    ":asol_gateway_server_lib", # Depends on our server library
  ]
  # This executable would need to be deployed and run as a separate process
  # from the main DashAIBrowser.
}

# Note on "//third_party/grpc:grpc++":
# This is a placeholder. The actual GN path to gRPC libraries within Chromium's
# build system would need to be used. Chromium bundles gRPC, so it will be
# something like "//third_party/grpc:grpc_unsecure" or similar.
# For this simulation, we use a generic name.
# The `proto_library` in `//proto/BUILD.gn` should also correctly depend on
# the parts of gRPC needed for code generation if it's not automatic.
#
# Note on include paths for headers like "proto/..." or "asol/adapters/...":
# For these paths to work correctly from files within e.g. asol/cpp, the
# `dashai-browser` directory (which is the parent of `proto`, `asol` etc.)
# would typically need to be added to the `include_dirs` of the targets,
# or be a globally recognized source root by the GN build configuration.
# This detail is crucial for actual compilation.
# Example for asol_service_impl_lib:
# include_dirs = [ "//" ] # If dashai-browser is the root of the GN build.
# Or more likely, paths in includes would be relative from such a root,
# e.g. #include "asol/adapters/gemini/gemini_text_adapter.h"
# The current includes like "proto/asol_service.grpc.pb.h" assume that the
# directory containing "proto" (i.e., dashai-browser) is an include path.
